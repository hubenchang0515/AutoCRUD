###########################################
# Generated by AutoCRUD                   #
#                                         #
# This file is used to create public      #
# handlers                                #
###########################################

from flask import Flask, request, jsonify
from common import app, db, getJson
from .methods import *


@app.route("/api/{{MODULE_NAME.lower()}}/create", methods=["POST"])
def handler_create_{{MODULE_NAME}}():
    try:
        json = getJson()
        {%- for COLUMN in COLUMNS %}
        {{ COLUMN["name"] }} = json['{{COLUMN["name"]}}']
        {%- endfor %}

        ret = create_{{MODULE_NAME}}(
            {%- for COLUMN in COLUMNS %}
            {{ COLUMN["name"] }}
            {%- if not loop.last -%}
            ,
            {%- endif -%}
            {%- endfor %}
        )
        return toJson(ret)
    except Exception as e:
        print(e)
        return toJson({"error": repr(e)})

@app.route("/api/{{MODULE_NAME.lower()}}/delete", methods=["POST"])
def handler_delete_{{MODULE_NAME}}():
    try:
        json = getJson()
        id = json["id"]
        ret = delete_{{MODULE_NAME}}(id)
        return toJson(ret)
    except Exception as e:
        print(e)
        return toJson({"error": repr(e)})

@app.route("/api/{{MODULE_NAME.lower()}}/update", methods=["POST"])
def handler_update_{{MODULE_NAME}}():
    try:
        json = getJson()
        id = json["id"]
        {%- for COLUMN in COLUMNS %}
        {{ COLUMN["name"] }} = json['{{COLUMN["name"]}}']
        {%- endfor %}
        ret = update_{{MODULE_NAME}}(
            id,
            {%- for COLUMN in COLUMNS %}
            {{ COLUMN["name"] }}
            {%- if not loop.last -%}
            ,
            {%- endif -%}
            {%- endfor %}
        )
        return toJson(ret)
    except Exception as e:
        print(e)
        return toJson({"error": repr(e)})

@app.route("/api/{{MODULE_NAME.lower()}}/get", methods=["POST"])
def handler_get_{{MODULE_NAME}}():
    try:
        json = getJson()
        id = json["id"]
        ret = get_{{MODULE_NAME}}(id)
        return toJson(ret)
    except Exception as e:
        print(e)
        return toJson({"error": repr(e)})

@app.route("/api/{{MODULE_NAME.lower()}}/list", methods=["POST"])
def handler_list_{{MODULE_NAME}}():
    try:
        json = getJson({"page":1, "perPage":10})
        page = json["page"]
        perPage = json["perPage"]
        ret = list_{{MODULE_NAME}}(page, perPage)
        return toJson(ret)
    except Exception as e:
        print(e)
        return toJson({"error": repr(e)})

{% for COLUMN in COLUMNS -%}
{%- if not COLUMN["props"]["private"] -%}
@app.route("/api/{{MODULE_NAME.lower()}}/find_by_{{ COLUMN["name"] }}", methods=["POST"])
def handler_find_{{MODULE_NAME}}_by_{{ COLUMN["name"] }}():
    try:
        json = getJson({"page":1, "perPage":10})
        page = json["page"]
        perPage = json["perPage"]
        {{ COLUMN["name"] }} = json["{{ COLUMN["name"] }}"]
        ret = find_{{MODULE_NAME}}_by_{{ COLUMN["name"] }}({{ COLUMN["name"] }}, page, perPage)
        return toJson(ret)
    except Exception as e:
        print(e)
        return toJson({"error": repr(e)})
{%- endif %}
{% endfor %}

{% for COLUMN in COLUMNS -%}
{%- if not COLUMN["props"]["private"] -%}
@app.route("/api/{{MODULE_NAME.lower()}}/search_by_{{ COLUMN["name"] }}", methods=["POST"])
def handler_search_{{MODULE_NAME}}_by_{{ COLUMN["name"] }}():
    try:
        json = getJson({"page":1, "perPage":10})
        page = json["page"]
        perPage = json["perPage"]
        {{ COLUMN["name"] }} = json["{{ COLUMN["name"] }}"]
        ret = search_{{MODULE_NAME}}_by_{{ COLUMN["name"] }}({{ COLUMN["name"] }}, page, perPage)
        return toJson(ret)
    except Exception as e:
        print(e)
        return toJson({"error": repr(e)})
{%- endif %}
{% endfor %}

{% for COLUMN in COLUMNS -%}
{%- if not COLUMN["props"]["private"] -%}
@app.route("/api/{{MODULE_NAME.lower()}}/update_{{ COLUMN["name"] }}", methods=["POST"])
def handler_update_{{MODULE_NAME}}_prop_{{ COLUMN["name"] }}():
    try:
        json = getJson()
        id = json["id"]
        {{ COLUMN["name"] }} = json["{{ COLUMN["name"] }}"]
        ret = update_{{MODULE_NAME}}_prop_{{ COLUMN["name"] }}(id, {{ COLUMN["name"] }})
        return toJson(ret)
    except Exception as e:
        print(e)
        return toJson({"error": repr(e)})
{%- endif %}
{% endfor %}